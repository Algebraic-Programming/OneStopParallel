{
    "globalParameters": {
        "timeLimit": 3600,
        "outputSchedule": false,
        "outputDotSchedule": false,
        "outputSankeySchedule": false
    },
    "algorithms": [
        {
            "name": "Serial",
            "description": "\tSerial Scheduler.",
            "parameters": { }
        },
        {
            "name": "BspLocking",
            "description": "Greedy scheduler that assigns tasks to processors in a BSP fashion.",
            "parameters": {
                "max_percent_idle_processors": 0.4
            }
        },
        {
            "name": "Variance",
            "description": "Greedy scheduler that assigns tasks to processors in a Descendant-Work-Variance fashion.",
            "parameters": {
                "max_percent_idle_processors": 0.2
            }
        },
        {
            "name": "GreedyEtf",
            "description": "Greedy scheduler that assigns tasks to processors in a ETF fashion.",
            "parameters": {
                "mode": "ETF"
            }
        },
        {
            "name": "GreedyCilk",
            "description": "Greedy scheduler that assigns tasks to processors in a CILK fashion.",
            "parameters": {
                "mode": "CILK"
            }
        },
        {
            "name": "GreedyMeta",
            "description": "Greedy scheduler that runs all greedy schedulers and selects the best solution.",
            "parameters": {}
        },
        {
            "name": "MultiHC",
            "description": "\tMulti-level hill climbing scheduler.",
            "parameters": {
                "compute_best_contraction_rate" : false,
                "contraction_rate": 0.15,
                "hill_climbing_steps": 300,
                "fast_coarsification": true
            }
        },
        {
            "name": "Wavefront",
            "description": "Wavefront scheduler.",
            "parameters": {
                "hillclimb_balancer_iterations": 10,
                "hungarian_alg": true
            }
        },
        {
            "name": "CoarseWavefront",
            "description": "Wavefront scheduler with initial random wavefront coarsening and hill climbing.",
            "parameters": {
                "hillclimb_balancer_iterations": 10,
                "hungarian_alg": true
            }
        },
        {
            "name": "HDagg",
            "description": "\tWavefront scheduler based on Zarebavani, Behrooz, et al. 'HDagg: hybrid aggregation of loop-carried dependence iterations in sparse matrix computations.',\n\t\t\t\t2022 IEEE International Parallel and Distributed Processing Symposium (IPDPS). IEEE, 2022.",
            "parameters": {
                "balance_threshhold": 1.1,
                "hillclimb_balancer_iterations": 10,
                "hungarian_alg": true,
                "balance_func": "maximum"
            }
        },
        {
            "name": "HDagg_original",
            "description": "Wavefront scheduler based on Zarebavani, Behrooz, et al. 'HDagg: hybrid aggregation of loop-carried dependence iterations in sparse matrix computations.',\n\t\t\t\t2022 IEEE International Parallel and Distributed Processing Symposium (IPDPS). IEEE, 2022.",
            "parameters": {
                "balance_threshhold": 1.1,
                "hillclimb_balancer_iterations": 0,
                "hungarian_alg": false,
                "balance_func": "maximum"
            }
        },
        {
            "name": "HDagg_original_xlogx",
            "description": "Wavefront scheduler based on Zarebavani, Behrooz, et al. 'HDagg: hybrid aggregation of loop-carried dependence iterations in sparse matrix computations.',\n\t\t\t\t2022 IEEE International Parallel and Distributed Processing Symposium (IPDPS). IEEE, 2022.",
            "parameters": {
                "balance_threshhold": 0.003,
                "hillclimb_balancer_iterations": 0,
                "hungarian_alg": false,
                "balance_func": "xlogx"
            }
        },
        {
            "name": "BalDMixR",
            "description": "\tBalance, Divide, Mix, Repeat! A scheduler that tries to improve the fitness of parallel execution.",
            "parameters": {
                "balance_threshhold": 1.1,
                "part_algo": "Greedy",
                "coin_type": "Thue_Morse",
                "clumps_per_partition": 6,
                "nodes_per_clump": 4,
                "nodes_per_partition": 30,
                "max_weight_for_flag": 0.3333,
                "balanced_cut_ratio": 0.3333,
                "min_weight_for_split": 0.0208333,
                "hill_climb_simple_improvement_attemps": 10,
                "min_comp_generation_when_shaving": 3
            }
        },
        {
            "name": "CoBalDMixR",
            "description": "Coarsen, Balance, Divide, Mix, Repeat! A scheduler that tries to improve the fitness of parallel execution.",
            "parameters": {
                "coarsen": {
                    "min_nodes_after_coarsen_per_partition": 1000,
                    "number_of_final_no_change_reps": 4,
                    "geom_decay_num_nodes": 1.0625,
                    "poisson_par": 0,
                    "noise": 0,
                    "edge_sort_ratio_triangle": 3,
                    "edge_sort_ratio_weight": 2,
                    "num_rep_without_node_decrease": 4,
                    "temperature_multiplier": 1.125,
                    "number_of_temperature_increases": 14
                },
                "initial": {
                    "balance_threshhold": 1.2,
                    "part_algo": "Greedy",
                    "coin_type": "Thue_Morse",
                    "clumps_per_partition": 6,
                    "nodes_per_clump": 4,
                    "nodes_per_partition": 15,
                    "max_weight_for_flag": 0.3333,
                    "balanced_cut_ratio": 0.3333,
                    "min_weight_for_split": 0.0208333,
                    "hill_climb_simple_improvement_attemps": 10,
                    "min_comp_generation_when_shaving": 3
                },
                "final": {
                    "balance_threshhold": 1.2,
                    "part_algo": "Greedy",
                    "coin_type": "Thue_Morse",
                    "clumps_per_partition": 6,
                    "nodes_per_clump": 4,
                    "nodes_per_partition": 15,
                    "max_weight_for_flag": 0.3333,
                    "balanced_cut_ratio": 0.3333,
                    "min_weight_for_split": 0.0208333,
                    "hill_climb_simple_improvement_attemps": 10,
                    "min_comp_generation_when_shaving": 3
                }
            }
        },
        {
            "name": "CoBalDMixRLK",
            "description": "Coarsen, Balance, Divide, Mix, Repeat! A scheduler that tries to improve the fitness of parallel execution with Lin-Kernighan improvement.",
            "parameters": {
                "coarsen": {
                    "min_nodes_after_coarsen_per_partition": 1000,
                    "number_of_final_no_change_reps": 4,
                    "geom_decay_num_nodes": 1.0625,
                    "poisson_par": 0,
                    "noise": 0,
                    "edge_sort_ratio_triangle": 3,
                    "edge_sort_ratio_weight": 2,
                    "num_rep_without_node_decrease": 4,
                    "temperature_multiplier": 1.125,
                    "number_of_temperature_increases": 14
                },
                "initial": {
                    "balance_threshhold": 1.2,
                    "part_algo": "Greedy",
                    "coin_type": "Thue_Morse",
                    "clumps_per_partition": 6,
                    "nodes_per_clump": 4,
                    "nodes_per_partition": 15,
                    "max_weight_for_flag": 0.3333,
                    "balanced_cut_ratio": 0.3333,
                    "min_weight_for_split": 0.0208333,
                    "hill_climb_simple_improvement_attemps": 10,
                    "min_comp_generation_when_shaving": 3
                },
                "final": {
                    "balance_threshhold": 1.2,
                    "part_algo": "Greedy",
                    "coin_type": "Thue_Morse",
                    "clumps_per_partition": 6,
                    "nodes_per_clump": 4,
                    "nodes_per_partition": 15,
                    "max_weight_for_flag": 0.3333,
                    "balanced_cut_ratio": 0.3333,
                    "min_weight_for_split": 0.0208333,
                    "hill_climb_simple_improvement_attemps": 10,
                    "min_comp_generation_when_shaving": 3
                }
            }
        },
        {
            "name": "FunnelBsp",
            "description": "Funnel Coarsening with BspGreedy",
            "parameters": {
                "coarsen": {
                    "max_relative_weight": 10.0,
                    "funnel_incoming": true,
                    "funnel_outgoing": false,
                    "first_funnel_incoming": true,
                    "use_approx_transitive_reduction": true
                },
                "bsp": {
                    "max_percent_idle_processors": 0.2
                }
            }
        },
        {
            "name": "FunnelVariance",
            "description": "Funnel Coarsening with VarianceGreedy",
            "parameters": {
                "coarsen": {
                    "max_relative_weight": 10.0,
                    "funnel_incoming": true,
                    "funnel_outgoing": false,
                    "first_funnel_incoming": true,
                    "use_approx_transitive_reduction": true
                },
                "variance": {
                    "max_percent_idle_processors": 0.2
                }
            }
        },
        {
            "name": "FunnelCoarseBspLK+HC",
            "description": "Funnel Coarsening with BspGreedyLK + HC",
            "parameters": {
                "coarsen": {
                    "max_relative_weight": 10.0,
                    "funnel_incoming": true,
                    "funnel_outgoing": false,
                    "first_funnel_incoming": true,
                    "use_approx_transitive_reduction": true
                },
                "max_percent_idle_processors": 0.2,
                "trans_edge_contraction": true
            }
        },
        {
            "name": "FunnelCoarseVarLK+HC",
            "description": "Funnel Coarsening with Variance GreedyLK + HC",
            "parameters": {
                "coarsen": {
                    "max_relative_weight": 10.0,
                    "funnel_incoming": true,
                    "funnel_outgoing": false,
                    "first_funnel_incoming": true,
                    "use_approx_transitive_reduction": true
                },
                "max_percent_idle_processors": 0.2,
                "trans_edge_contraction": true
            }
        },
        {
            "name": "FunnelCoarseCobaldLK+HC",
            "description": "Funnel Coarsening with Variance GreedyLK + HC",
            "parameters": {
                "funnel": {
                    "max_relative_weight": 10.0,
                    "funnel_incoming": true,
                    "funnel_outgoing": false,
                    "first_funnel_incoming": true,
                    "use_approx_transitive_reduction": true
                },
                "coarsen": {
                    "min_nodes_after_coarsen_per_partition": 1000,
                    "number_of_final_no_change_reps": 4,
                    "geom_decay_num_nodes": 1.0625,
                    "poisson_par": 0,
                    "noise": 0,
                    "edge_sort_ratio_triangle": 3,
                    "edge_sort_ratio_weight": 2,
                    "num_rep_without_node_decrease": 4,
                    "temperature_multiplier": 1.125,
                    "number_of_temperature_increases": 20
                },
                "initial": {
                    "balance_threshhold": 1.2,
                    "part_algo": "Greedy",
                    "coin_type": "Thue_Morse",
                    "clumps_per_partition": 6,
                    "nodes_per_clump": 4,
                    "nodes_per_partition": 15,
                    "max_weight_for_flag": 0.3333,
                    "balanced_cut_ratio": 0.3333,
                    "min_weight_for_split": 0.0208333,
                    "hill_climb_simple_improvement_attemps": 10,
                    "min_comp_generation_when_shaving": 3
                },
                "final": {
                    "balance_threshhold": 1.2,
                    "part_algo": "Greedy",
                    "coin_type": "Thue_Morse",
                    "clumps_per_partition": 6,
                    "nodes_per_clump": 4,
                    "nodes_per_partition": 15,
                    "max_weight_for_flag": 0.3333,
                    "balanced_cut_ratio": 0.3333,
                    "min_weight_for_split": 0.0208333,
                    "hill_climb_simple_improvement_attemps": 10,
                    "min_comp_generation_when_shaving": 3
                },
                "max_percent_idle_processors": 0.2,
                "trans_edge_contraction": true
            }
        }
    ]
}